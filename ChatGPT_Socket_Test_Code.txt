# Used ChatGPT to try and generate code to transmit data between program
# Uses the socket library
# Tutorial: https://realpython.com/python-sockets/


# Code for the SENSOR PROGRAM
import socket
import time

# Define your function to collect sensor data - IGNORE
def collect_sensor_data():
    # Replace this with actual sensor data collection logic
    sensor1_reading = 10  # Replace with actual sensor readings
    sensor2_reading = 20  # Replace with actual sensor readings
    return (sensor1_reading, sensor2_reading)

# Establish socket connection
host = 'localhost'  # Change this to the IP of the control program if it's running on a different machine
port = 65432  # Choose an available port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

while True:
    sensor_data = collect_sensor_data()
    # Send sensor data over the socket
    s.sendall(str(sensor_data).encode())
    time.sleep(0.1)  # Adjust the sleep time as needed








# Code for SERVO MOTOR CONTROL
import socket
import ast

# Function to control motors based on sensor data - IGNORE
def control_motors(sensor_data):
    # Extract sensor readings from the tuple
    sensor1_reading, sensor2_reading = sensor_data
    # Implement your motor control logic here
    print("Sensor 1 Reading:", sensor1_reading)
    print("Sensor 2 Reading:", sensor2_reading)

# Establish socket connection
host = 'localhost'  # Change this to the IP of the sensor data program if it's running on a different machine
port = 65432  # Same port as in the sensor data program
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)

print("Waiting for connection...")
conn, addr = s.accept()
print("Connected to:", addr)

while True:
    # Receive sensor data from the sensor data program
    data = conn.recv(1024)
    if not data:
        break
    # Convert the received data string back to a tuple
    sensor_data = ast.literal_eval(data.decode())
    # Control motors based on the received sensor data
    control_motors(sensor_data)

conn.close()
